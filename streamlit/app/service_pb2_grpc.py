# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service_pb2 as service__pb2


class PromptServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetResponse = channel.unary_unary(
                '/example.PromptService/GetResponse',
                request_serializer=service__pb2.PromptRequest.SerializeToString,
                response_deserializer=service__pb2.PromptReply.FromString,
                )
        self.GetResponseStream = channel.unary_stream(
                '/example.PromptService/GetResponseStream',
                request_serializer=service__pb2.PromptRequest.SerializeToString,
                response_deserializer=service__pb2.PromptReply.FromString,
                )


class PromptServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResponseStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PromptServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResponse,
                    request_deserializer=service__pb2.PromptRequest.FromString,
                    response_serializer=service__pb2.PromptReply.SerializeToString,
            ),
            'GetResponseStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetResponseStream,
                    request_deserializer=service__pb2.PromptRequest.FromString,
                    response_serializer=service__pb2.PromptReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'example.PromptService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PromptService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example.PromptService/GetResponse',
            service__pb2.PromptRequest.SerializeToString,
            service__pb2.PromptReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResponseStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/example.PromptService/GetResponseStream',
            service__pb2.PromptRequest.SerializeToString,
            service__pb2.PromptReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DatabaseHandlerServiceStub(object):
    """Der Service, der die Funktion bereitstellt
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSuggestions = channel.unary_unary(
                '/example.DatabaseHandlerService/GetSuggestions',
                request_serializer=service__pb2.GetSuggestionsRequest.SerializeToString,
                response_deserializer=service__pb2.GetSuggestionsResponse.FromString,
                )
        self.GetAnswer = channel.unary_unary(
                '/example.DatabaseHandlerService/GetAnswer',
                request_serializer=service__pb2.GetAnswerRequest.SerializeToString,
                response_deserializer=service__pb2.GetAnswerResponse.FromString,
                )
        self.GetSuggestionsVector = channel.unary_unary(
                '/example.DatabaseHandlerService/GetSuggestionsVector',
                request_serializer=service__pb2.GetSuggestionsRequest.SerializeToString,
                response_deserializer=service__pb2.GetSuggestionsResponse.FromString,
                )
        self.GetSuggestionsVectorLocal = channel.unary_unary(
                '/example.DatabaseHandlerService/GetSuggestionsVectorLocal',
                request_serializer=service__pb2.GetSuggestionsRequest.SerializeToString,
                response_deserializer=service__pb2.GetSuggestionsResponse.FromString,
                )


class DatabaseHandlerServiceServicer(object):
    """Der Service, der die Funktion bereitstellt
    """

    def GetSuggestions(self, request, context):
        """Die Funktion, die aufgerufen werden soll
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAnswer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSuggestionsVector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSuggestionsVectorLocal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseHandlerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSuggestions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSuggestions,
                    request_deserializer=service__pb2.GetSuggestionsRequest.FromString,
                    response_serializer=service__pb2.GetSuggestionsResponse.SerializeToString,
            ),
            'GetAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAnswer,
                    request_deserializer=service__pb2.GetAnswerRequest.FromString,
                    response_serializer=service__pb2.GetAnswerResponse.SerializeToString,
            ),
            'GetSuggestionsVector': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSuggestionsVector,
                    request_deserializer=service__pb2.GetSuggestionsRequest.FromString,
                    response_serializer=service__pb2.GetSuggestionsResponse.SerializeToString,
            ),
            'GetSuggestionsVectorLocal': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSuggestionsVectorLocal,
                    request_deserializer=service__pb2.GetSuggestionsRequest.FromString,
                    response_serializer=service__pb2.GetSuggestionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'example.DatabaseHandlerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DatabaseHandlerService(object):
    """Der Service, der die Funktion bereitstellt
    """

    @staticmethod
    def GetSuggestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example.DatabaseHandlerService/GetSuggestions',
            service__pb2.GetSuggestionsRequest.SerializeToString,
            service__pb2.GetSuggestionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example.DatabaseHandlerService/GetAnswer',
            service__pb2.GetAnswerRequest.SerializeToString,
            service__pb2.GetAnswerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSuggestionsVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example.DatabaseHandlerService/GetSuggestionsVector',
            service__pb2.GetSuggestionsRequest.SerializeToString,
            service__pb2.GetSuggestionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSuggestionsVectorLocal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example.DatabaseHandlerService/GetSuggestionsVectorLocal',
            service__pb2.GetSuggestionsRequest.SerializeToString,
            service__pb2.GetSuggestionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
